replicaCount: 1

pdb:
  create: false
  minAvailable: 1
  maxUnavailable: ""

deploymentAnnotations: {}
deploymentLabels: {}
podAnnotations: {}
podLabels: {}
image:
  repository: metabase/metabase
  tag: v0.48.3
  command: []
  pullPolicy: IfNotPresent
  pullSecrets: []



## String to fully override metabase.fullname template
##
# fullnameOverride:

# Config Jetty web server
listen:
  host: "0.0.0.0"
  port: 3000

monitoring:
  enabled: false
  serviceMonitor:
    enabled: false
  port: 9191

ssl:
  # If you have an ssl certificate and would prefer to have Metabase run over HTTPS
  enabled: false
  # port: 8443
  # keyStore: |-
  #   << JKS KEY STORE >>
  # keyStorePassword: storepass
jetty:
#  maxThreads: 254
#  minThreads: 8
#  maxQueued: -1
#  maxIdleTime: 60000

# Backend database
database:
  # Database type (h2 / mysql / postgres), default: h2
  type: postgres
  ## Specify file to store H2 database.  You will also have to back this with a volume (cf. extraVolume and extraVolumeMounts)!
  # file:
  # encryptionKey: << YOUR ENCRYPTION KEY OR LEAVE BLANK AND USE EXISTING SECRET >>
  ## Only need when you use mysql / postgres
  host: {{ rdsInstanceHostNoPort }}
  port: 5432
  dbname: {{ dbname }}
  username: {{ rdsUsername }}

  existingSecret: eso-backend
  # existingSecretUsernameKey:
  existingSecretPasswordKey: rds_password

  googleCloudSQL:

    instanceConnectionNames: []
    resources: {}
    securityContext:
      runAsNonRoot: true

password:
  complexity: normal
  length: 6

timeZone: UTC
emojiLogging: true
colorLogging: true


session:
  {}


extraInitContainers: []
extraVolumeMounts: []
extraVolumes: []

livenessProbe:
  path: /api/health
  initialDelaySeconds: 120
  timeoutSeconds: 30
  failureThreshold: 6

readinessProbe:
  path: /api/health
  initialDelaySeconds: 30
  timeoutSeconds: 3
  periodSeconds: 5

service:
  name: metabase
  type: ClusterIP
  externalPort: 80
  internalPort: 3000
  nodePort:
  annotations:
    {}
  loadBalancerSourceRanges:
    {}

ingress:
  enabled: true
  className: nginx-internal
  # The ingress class name, if you use multiple ingress controllers:
  # className: ...
  # Used to create Ingress record (should used with service.type: ClusterIP).
  hosts:
    - {{ 'metabase.' ~ dnsDomain }}
  ## Path for grafana ingress
  path: /

  pathType: Prefix
  labels:
    app.kubernetes.io/instance: metabase
    app.kubernetes.io/name: metabase

  annotations:
    external-dns.alpha.kubernetes.io/hostname: {{ 'metabase.' ~ dnsDomain }}
    nginx.ingress.kubernetes.io/proxy-buffer-size: "256k"
    nginx.ingress.kubernetes.io/proxy-buffering: "on"
    nginx.ingress.kubernetes.io/proxy-buffers-number: "4"
    nginx.ingress.kubernetes.io/proxy-max-temp-file-size: "1024m"

  tls:
    - secretName: {{ tlsSecretName }}
      hosts:
      - {{ 'metabase.' ~ dnsDomain }}

route:
  enabled: false
  annotations:
    {}
    # haproxy.router.openshift.io/timeout: "60s"
  # host: ""
  path: ""
  wildcardPolicy: "None"
  tls:
    {}

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name:

resources:
  {}

nodeSelector: {}

tolerations: []

affinity: {}

awsEKS:
  sgp:
    enabled: false

extraEnv: {}


envFrom: []


securityContext: {}

sidecars: []
